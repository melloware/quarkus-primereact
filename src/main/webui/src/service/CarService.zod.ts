/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Quarkus PrimeReact Monorepo
 * Quarkus monorepo demonstrating Panache REST server with PrimeReact UI client
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from 'zod';

/**
 * Returns a paginated list of cars with optional filtering and sorting
 * @summary List cars
 */
export const getEntityCarsQueryParams = zod.object({
	request: zod.coerce.string().optional()
});

export const getEntityCarsResponseRecordsItemVinMax = 17;

export const getEntityCarsResponseRecordsItemVinRegExp = new RegExp('\\S');
export const getEntityCarsResponseRecordsItemMakeMax = 255;

export const getEntityCarsResponseRecordsItemMakeRegExp = new RegExp('\\S');
export const getEntityCarsResponseRecordsItemModelMax = 255;

export const getEntityCarsResponseRecordsItemModelRegExp = new RegExp('\\S');
export const getEntityCarsResponseRecordsItemYearMin = 1960;

export const getEntityCarsResponseRecordsItemYearMax = 2050;
export const getEntityCarsResponseRecordsItemColorMax = 20;

export const getEntityCarsResponseRecordsItemColorRegExp = new RegExp('\\S');
export const getEntityCarsResponseRecordsItemPriceMin = 0;

export const getEntityCarsResponseRecordsItemPriceMax = 250000;

export const getEntityCarsResponse = zod
	.object({
		totalRecords: zod.coerce.number().optional().describe('Total records available by this query criteria'),
		records: zod
			.array(
				zod
					.object({
						id: zod.coerce.number().optional(),
						vin: zod.coerce
							.string()
							.max(getEntityCarsResponseRecordsItemVinMax)
							.regex(getEntityCarsResponseRecordsItemVinRegExp)
							.describe('VIN number'),
						make: zod.coerce
							.string()
							.max(getEntityCarsResponseRecordsItemMakeMax)
							.regex(getEntityCarsResponseRecordsItemMakeRegExp)
							.describe('Manufacturer'),
						model: zod.coerce
							.string()
							.max(getEntityCarsResponseRecordsItemModelMax)
							.regex(getEntityCarsResponseRecordsItemModelRegExp)
							.describe('Model Number'),
						year: zod.coerce
							.number()
							.min(getEntityCarsResponseRecordsItemYearMin)
							.max(getEntityCarsResponseRecordsItemYearMax)
							.describe('Year of manufacture'),
						color: zod.coerce
							.string()
							.max(getEntityCarsResponseRecordsItemColorMax)
							.regex(getEntityCarsResponseRecordsItemColorRegExp)
							.describe('HTML color of the car'),
						price: zod.coerce
							.number()
							.min(getEntityCarsResponseRecordsItemPriceMin)
							.max(getEntityCarsResponseRecordsItemPriceMax)
							.describe('Price'),
						modifiedTime: zod.coerce.date().optional()
					})
					.describe('Entity that represents a car.')
			)
			.optional()
			.describe('Records for this set of pagination, sorting, filtering.')
	})
	.describe('Represents a PrimeReact query response to the UI for a complex datatable with multiple sorts, multiple filters, and pagination.');

/**
 * Creates a new car entry
 * @summary Create a new car
 */
export const postEntityCarsBodyVinMax = 17;

export const postEntityCarsBodyVinRegExp = new RegExp('\\S');
export const postEntityCarsBodyMakeMax = 255;

export const postEntityCarsBodyMakeRegExp = new RegExp('\\S');
export const postEntityCarsBodyModelMax = 255;

export const postEntityCarsBodyModelRegExp = new RegExp('\\S');
export const postEntityCarsBodyYearMin = 1960;

export const postEntityCarsBodyYearMax = 2050;
export const postEntityCarsBodyColorMax = 20;

export const postEntityCarsBodyColorRegExp = new RegExp('\\S');
export const postEntityCarsBodyPriceMin = 0;

export const postEntityCarsBodyPriceMax = 250000;

export const postEntityCarsBody = zod
	.object({
		id: zod.coerce.number().optional(),
		vin: zod.coerce.string().max(postEntityCarsBodyVinMax).regex(postEntityCarsBodyVinRegExp).describe('VIN number'),
		make: zod.coerce.string().max(postEntityCarsBodyMakeMax).regex(postEntityCarsBodyMakeRegExp).describe('Manufacturer'),
		model: zod.coerce.string().max(postEntityCarsBodyModelMax).regex(postEntityCarsBodyModelRegExp).describe('Model Number'),
		year: zod.coerce.number().min(postEntityCarsBodyYearMin).max(postEntityCarsBodyYearMax).describe('Year of manufacture'),
		color: zod.coerce.string().max(postEntityCarsBodyColorMax).regex(postEntityCarsBodyColorRegExp).describe('HTML color of the car'),
		price: zod.coerce.number().min(postEntityCarsBodyPriceMin).max(postEntityCarsBodyPriceMax).describe('Price'),
		modifiedTime: zod.coerce.date().optional()
	})
	.describe('Entity that represents a car.');

/**
 * Returns a list of distinct car manufacturers
 * @summary Get all manufacturers
 */
export const getEntityCarsManufacturersResponseItem = zod.coerce.string();
export const getEntityCarsManufacturersResponse = zod.array(getEntityCarsManufacturersResponseItem);

/**
 * Updates an existing car based on ID
 * @summary Update a car
 */
export const putEntityCarsIdPathIdMin = 0;

export const putEntityCarsIdParams = zod.object({
	id: zod.coerce.number().min(putEntityCarsIdPathIdMin)
});

export const putEntityCarsIdBodyVinMax = 17;

export const putEntityCarsIdBodyVinRegExp = new RegExp('\\S');
export const putEntityCarsIdBodyMakeMax = 255;

export const putEntityCarsIdBodyMakeRegExp = new RegExp('\\S');
export const putEntityCarsIdBodyModelMax = 255;

export const putEntityCarsIdBodyModelRegExp = new RegExp('\\S');
export const putEntityCarsIdBodyYearMin = 1960;

export const putEntityCarsIdBodyYearMax = 2050;
export const putEntityCarsIdBodyColorMax = 20;

export const putEntityCarsIdBodyColorRegExp = new RegExp('\\S');
export const putEntityCarsIdBodyPriceMin = 0;

export const putEntityCarsIdBodyPriceMax = 250000;

export const putEntityCarsIdBody = zod
	.object({
		id: zod.coerce.number().optional(),
		vin: zod.coerce.string().max(putEntityCarsIdBodyVinMax).regex(putEntityCarsIdBodyVinRegExp).describe('VIN number'),
		make: zod.coerce.string().max(putEntityCarsIdBodyMakeMax).regex(putEntityCarsIdBodyMakeRegExp).describe('Manufacturer'),
		model: zod.coerce.string().max(putEntityCarsIdBodyModelMax).regex(putEntityCarsIdBodyModelRegExp).describe('Model Number'),
		year: zod.coerce.number().min(putEntityCarsIdBodyYearMin).max(putEntityCarsIdBodyYearMax).describe('Year of manufacture'),
		color: zod.coerce.string().max(putEntityCarsIdBodyColorMax).regex(putEntityCarsIdBodyColorRegExp).describe('HTML color of the car'),
		price: zod.coerce.number().min(putEntityCarsIdBodyPriceMin).max(putEntityCarsIdBodyPriceMax).describe('Price'),
		modifiedTime: zod.coerce.date().optional()
	})
	.describe('Entity that represents a car.');

export const putEntityCarsIdResponseVinMax = 17;

export const putEntityCarsIdResponseVinRegExp = new RegExp('\\S');
export const putEntityCarsIdResponseMakeMax = 255;

export const putEntityCarsIdResponseMakeRegExp = new RegExp('\\S');
export const putEntityCarsIdResponseModelMax = 255;

export const putEntityCarsIdResponseModelRegExp = new RegExp('\\S');
export const putEntityCarsIdResponseYearMin = 1960;

export const putEntityCarsIdResponseYearMax = 2050;
export const putEntityCarsIdResponseColorMax = 20;

export const putEntityCarsIdResponseColorRegExp = new RegExp('\\S');
export const putEntityCarsIdResponsePriceMin = 0;

export const putEntityCarsIdResponsePriceMax = 250000;

export const putEntityCarsIdResponse = zod
	.object({
		id: zod.coerce.number().optional(),
		vin: zod.coerce.string().max(putEntityCarsIdResponseVinMax).regex(putEntityCarsIdResponseVinRegExp).describe('VIN number'),
		make: zod.coerce.string().max(putEntityCarsIdResponseMakeMax).regex(putEntityCarsIdResponseMakeRegExp).describe('Manufacturer'),
		model: zod.coerce.string().max(putEntityCarsIdResponseModelMax).regex(putEntityCarsIdResponseModelRegExp).describe('Model Number'),
		year: zod.coerce.number().min(putEntityCarsIdResponseYearMin).max(putEntityCarsIdResponseYearMax).describe('Year of manufacture'),
		color: zod.coerce.string().max(putEntityCarsIdResponseColorMax).regex(putEntityCarsIdResponseColorRegExp).describe('HTML color of the car'),
		price: zod.coerce.number().min(putEntityCarsIdResponsePriceMin).max(putEntityCarsIdResponsePriceMax).describe('Price'),
		modifiedTime: zod.coerce.date().optional()
	})
	.describe('Entity that represents a car.');

/**
 * Returns a car based on the provided ID
 * @summary Get a car by ID
 */
export const getEntityCarsIdPathIdMin = 0;

export const getEntityCarsIdParams = zod.object({
	id: zod.coerce.number().min(getEntityCarsIdPathIdMin)
});

export const getEntityCarsIdResponseVinMax = 17;

export const getEntityCarsIdResponseVinRegExp = new RegExp('\\S');
export const getEntityCarsIdResponseMakeMax = 255;

export const getEntityCarsIdResponseMakeRegExp = new RegExp('\\S');
export const getEntityCarsIdResponseModelMax = 255;

export const getEntityCarsIdResponseModelRegExp = new RegExp('\\S');
export const getEntityCarsIdResponseYearMin = 1960;

export const getEntityCarsIdResponseYearMax = 2050;
export const getEntityCarsIdResponseColorMax = 20;

export const getEntityCarsIdResponseColorRegExp = new RegExp('\\S');
export const getEntityCarsIdResponsePriceMin = 0;

export const getEntityCarsIdResponsePriceMax = 250000;

export const getEntityCarsIdResponse = zod
	.object({
		id: zod.coerce.number().optional(),
		vin: zod.coerce.string().max(getEntityCarsIdResponseVinMax).regex(getEntityCarsIdResponseVinRegExp).describe('VIN number'),
		make: zod.coerce.string().max(getEntityCarsIdResponseMakeMax).regex(getEntityCarsIdResponseMakeRegExp).describe('Manufacturer'),
		model: zod.coerce.string().max(getEntityCarsIdResponseModelMax).regex(getEntityCarsIdResponseModelRegExp).describe('Model Number'),
		year: zod.coerce.number().min(getEntityCarsIdResponseYearMin).max(getEntityCarsIdResponseYearMax).describe('Year of manufacture'),
		color: zod.coerce.string().max(getEntityCarsIdResponseColorMax).regex(getEntityCarsIdResponseColorRegExp).describe('HTML color of the car'),
		price: zod.coerce.number().min(getEntityCarsIdResponsePriceMin).max(getEntityCarsIdResponsePriceMax).describe('Price'),
		modifiedTime: zod.coerce.date().optional()
	})
	.describe('Entity that represents a car.');

/**
 * Deletes a car based on ID
 * @summary Delete a car
 */
export const deleteEntityCarsIdPathIdMin = 0;

export const deleteEntityCarsIdParams = zod.object({
	id: zod.coerce.number().min(deleteEntityCarsIdPathIdMin)
});

/**
 * Pushes a notification message to all connected clients
 * @summary Push notification message
 */
export const postSocketNotifyQueryParams = zod.object({
	message: zod.coerce.string().optional()
});
