---
openapi: 3.1.0
components:
  schemas:
    Car:
      description: Entity that represents a car.
      type: object
      properties:
        id:
          type: integer
          format: int64
        vin:
          type: string
          description: VIN number
          examples:
          - WVGEF9BP4DD085048
          pattern: \S
          maxLength: 17
        make:
          type: string
          description: Manufacturer
          examples:
          - BMW
          pattern: \S
          maxLength: 255
        model:
          type: string
          description: Model Number
          examples:
          - 330ix
          pattern: \S
          maxLength: 255
        year:
          type: integer
          format: int32
          description: Year of manufacture
          examples:
          - 1974
          maximum: 2050
          minimum: 1960
        color:
          type: string
          description: HTML color of the car
          examples:
          - 891d4c
          pattern: \S
          maxLength: 20
        price:
          type: number
          description: Price
          examples:
          - 9999.99
          maximum: 250000.00
          minimum: 0.00
        modifiedTime:
          description: Modified time of the record
          type: string
          $ref: "#/components/schemas/Instant"
      required:
      - vin
      - make
      - model
      - year
      - color
      - price
    FilterConstraint:
      type: object
      properties:
        value:
          description: Value to filter this column by
        matchMode:
          type: string
          description: "Filter match mode e.g. equals, notEquals, contains, notContains,\
            \ gt, gte, lt, lte"
          examples:
          - equals
    HttpProblem:
      description: HTTP Problem Response according to RFC9457 and RFC7807
      additionalProperties: true
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A optional URI reference that identifies the problem type
          examples:
          - https://example.com/errors/not-found
        title:
          type: string
          description: "A optional, short, human-readable summary of the problem type"
          examples:
          - Not Found
        status:
          type: integer
          format: int32
          description: The HTTP status code for this occurrence of the problem
          examples:
          - 404
        detail:
          type: string
          description: A optional human-readable explanation specific to this occurrence
            of the problem
          examples:
          - Record not found
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of
            the problem
          examples:
          - https://api.example.com/errors/123
    HttpValidationProblem:
      description: HTTP Validation Problem Response according to RFC9457 and RFC7807
      additionalProperties: true
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A optional URI reference that identifies the problem type
          examples:
          - https://example.com/errors/not-found
        title:
          type: string
          description: "A optional, short, human-readable summary of the problem type"
          examples:
          - Not Found
        status:
          type: integer
          format: int32
          description: The HTTP status code for this occurrence of the problem
          examples:
          - 404
        detail:
          type: string
          description: A optional human-readable explanation specific to this occurrence
            of the problem
          examples:
          - Record not found
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of
            the problem
          examples:
          - https://api.example.com/errors/123
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
          description: List of validation constraint violations that occurred
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    MultiFilterMeta:
      type: object
      properties:
        value:
          description: Value to filter this column by
        matchMode:
          type: string
          description: "Filter match mode e.g. equals, notEquals, contains, notContains,\
            \ gt, gte, lt, lte"
          examples:
          - equals
        operator:
          type: string
          description: Filter operator either 'and' or 'or'
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/FilterConstraint"
          description: List of filter constraints for this filter
    MultiSortMeta:
      type: object
      properties:
        field:
          type: string
          description: Sort field for this multiple sort
          examples:
          - lastName
        order:
          type: integer
          format: int32
          description: "Sort order for this field either -1 desc, 0 none, 1 asc"
          examples:
          - 1
    QueryRequest:
      description: "Represents a PrimeReact query request from the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        first:
          type: integer
          format: int32
          description: First record
          examples:
          - 1
        rows:
          type: integer
          format: int32
          description: Number of rows
          examples:
          - 10
        page:
          type: integer
          format: int32
          description: Page number
          examples:
          - 1
        sortField:
          type: string
          description: Sort field if single field sorting
          examples:
          - firstName
        sortOrder:
          type: integer
          format: int32
          description: "Sort order if single field sorting either -1 desc, 0 none,\
            \ 1 asc"
          examples:
          - 1
        multiSortMeta:
          type: array
          items:
            $ref: "#/components/schemas/MultiSortMeta"
          description: Multiple sorting list of columns to sort and in which order
        filters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/MultiFilterMeta"
          description: Map of columns being filtered and their filter criteria
    QueryResponse:
      description: "Represents a PrimeReact query response to the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          description: Total records available by this query criteria
          examples:
          - 4128
        records:
          type: array
          items: {}
          description: "Records for this set of pagination, sorting, filtering."
    QueryResponseCar:
      description: "Represents a PrimeReact query response to the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          description: Total records available by this query criteria
          examples:
          - 4128
        records:
          type: array
          items:
            $ref: "#/components/schemas/Car"
          description: "Records for this set of pagination, sorting, filtering."
    SocketMessage:
      description: WebSocket message for real-time updates
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message
          examples:
          - 03001000c0020000
        timestamp:
          description: UTC timestamp of when the message was created
          type: string
          examples:
          - 2024-03-20T10:30:00Z
          $ref: "#/components/schemas/ZonedDateTime"
        type:
          description: Type of socket message
          type: string
          examples:
          - USER_JOINED
          - USER_LEFT
          - REFRESH_DATA
          - NOTIFICATION
          $ref: "#/components/schemas/SocketMessageType"
        message:
          type: string
          description: Optional message payload
          examples:
          - User connected
          - Please refresh your data
        context:
          type: object
          additionalProperties:
            type: string
          description: Additional context information for the message
          examples:
          - source: system
            priority: high
      required:
      - type
    SocketMessageType:
      type: string
      enum:
      - REFRESH_DATA
      - NOTIFICATION
    Violation:
      type: object
      description: Validation constraint violation details
      properties:
        field:
          type: string
          description: The field for which the validation failed
          examples:
          - "#/profile/email"
        in:
          type: string
          description: "Part of the http request where the validation error occurred\
            \ such as query, path, header, form, body"
          examples:
          - query
          - path
          - header
          - form
          - body
        message:
          type: string
          description: Description of the validation error
          examples:
          - Invalid email format
    ZonedDateTime:
      type: string
      format: date-time
      examples:
      - 2022-03-10T12:15:50-04:00
    LoggerLevel:
      title: LoggerLevel
      type: string
      enum:
      - "OFF"
      - SEVERE
      - ERROR
      - FATAL
      - WARNING
      - WARN
      - INFO
      - DEBUG
      - TRACE
      - CONFIG
      - FINE
      - FINER
      - FINEST
      - ALL
    LoggerInfo:
      title: LoggerInfo
      type: object
      properties:
        configuredLevel:
          $ref: "#/components/schemas/LoggerLevel"
        effectiveLevel:
          $ref: "#/components/schemas/LoggerLevel"
        name:
          type: string
    HealthResponse:
      type: object
      properties:
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"
        status:
          type: string
          enum:
          - UP
          - DOWN
    HealthCheck:
      type: object
      properties:
        data:
          type:
          - object
          - "null"
        name:
          type: string
        status:
          type: string
          enum:
          - UP
          - DOWN
tags:
- name: Car Resource
  description: CRUD operations for the Car entity.
- name: WebSocket Resource
  description: WebSocket operations.
- name: Logging Manager
  description: Visualize and manage the log level of your loggers.
- name: MicroProfile Health
  description: Check the health of the application
paths:
  /entity/cars:
    get:
      summary: List cars
      description: Returns a paginated list of cars with optional filtering and sorting
      tags:
      - Car Resource
      parameters:
      - name: request
        in: query
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponseCar"
        "400":
          description: Invalid request format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
    post:
      summary: Create a new car
      description: Creates a new car entry
      tags:
      - Car Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "201":
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "400":
          description: Invalid request format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
        "422":
          description: Invalid car data provided
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
  /entity/cars/manufacturers:
    get:
      summary: Get all manufacturers
      description: Returns a list of distinct car manufacturers
      tags:
      - Car Resource
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /entity/cars/{id}:
    put:
      summary: Update a car
      description: Updates an existing car based on ID
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "200":
          description: Car updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "400":
          description: Invalid request format
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
        "404":
          description: Car not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
        "422":
          description: Invalid car data provided
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
    get:
      summary: Get a car by ID
      description: Returns a car based on the provided ID
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
    delete:
      summary: Delete a car
      description: Deletes a car based on ID
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        "204":
          description: Car successfully deleted
        "404":
          description: Car not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
  /socket/notify:
    post:
      summary: Push notification message
      description: Pushes a notification message to all connected clients
      tags:
      - WebSocket Resource
      parameters:
      - name: message
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Notification message sent successfully
        "422":
          description: Message cannot be null or blank
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/HttpProblem"
  /socket/refresh:
    post:
      summary: Push a UI refresh signal
      description: Pushes a UI refresh signal to all connected clients
      tags:
      - WebSocket Resource
      responses:
        "201":
          description: Refresh UI message sent successfully
  /q/logging-manager:
    summary: "Return info on all loggers, or a specific logger"
    description: Logging Manager Loggers
    get:
      operationId: logging_manager_get_all
      summary: Information on Logger(s)
      description: Get information on all loggers or a specific logger.
      tags:
      - Logging Manager
      parameters:
      - name: loggerName
        in: query
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoggerInfo"
        "404":
          description: Not Found
    post:
      operationId: logging_manager_update
      summary: Update log level
      description: Update a log level for a certain logger
      tags:
      - Logging Manager
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                loggerName: {}
                loggerLevel:
                  $ref: "#/components/schemas/LoggerLevel"
      responses:
        "201":
          description: Created
  /q/logging-manager/levels:
    description: All available levels
    summary: Return all levels that is available
    get:
      description: This returns all possible log levels
      operationId: logging_manager_levels
      tags:
      - Logging Manager
      summary: Get all available levels
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoggerLevel"
  /q/health:
    description: MicroProfile Health Endpoint
    summary: MicroProfile Health provides a way for your application to distribute
      information about its healthiness state to state whether or not it is able to
      function properly
    get:
      operationId: microprofile_health_root
      description: Check the health of the application
      tags:
      - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /q/health/live:
    description: MicroProfile Health - Liveness Endpoint
    summary: Liveness checks are utilized to tell whether the application should be
      restarted
    get:
      operationId: microprofile_health_liveness
      description: Check the liveness of the application
      tags:
      - MicroProfile Health
      summary: The Liveness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /q/health/ready:
    description: MicroProfile Health - Readiness Endpoint
    summary: Readiness checks are used to tell whether the application is able to
      process requests
    get:
      operationId: microprofile_health_readiness
      description: Check the readiness of the application
      tags:
      - MicroProfile Health
      summary: The Readiness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /q/health/started:
    description: MicroProfile Health - Startup Endpoint
    summary: Startup checks are an used to tell when the application has started
    get:
      operationId: microprofile_health_startup
      description: Check the startup of the application
      tags:
      - MicroProfile Health
      summary: The Startup check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
info:
  title: Quarkus PrimeReact Monorepo
  version: 1.0.0
  description: Quarkus monorepo demonstrating Panache REST server with PrimeReact
    UI client
  contact:
    name: Melloware
    email: mellowaredev@gmail.com
    url: https://melloware.com
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
