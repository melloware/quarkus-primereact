---
openapi: 3.1.0
components:
  schemas:
    Car:
      description: Entity that represents a car.
      type: object
      properties:
        id:
          type: integer
          format: int64
        vin:
          type: string
          description: VIN number
          examples:
          - WVGEF9BP4DD085048
          pattern: \S
        make:
          type: string
          description: Manufacturer
          examples:
          - BMW
          pattern: \S
        model:
          type: string
          description: Model Number
          examples:
          - 330ix
          pattern: \S
        year:
          type: integer
          format: int32
          description: Year of manufacture
          examples:
          - 1974
          minimum: 1960
        color:
          type: string
          description: HTML color of the car
          examples:
          - 891d4c
          pattern: \S
        price:
          type: number
          description: Price
          examples:
          - 9999.99
          minimum: 0.00
        modifiedTime:
          description: Modified time of the record
          type: string
          $ref: "#/components/schemas/Instant"
      required:
      - vin
      - make
      - model
      - year
      - color
      - price
    FilterConstraint:
      type: object
      properties:
        value:
          description: Value to filter this column by
        matchMode:
          type: string
          description: "Filter match mode e.g. equals, notEquals, contains, notContains,\
            \ gt, gte, lt, lte"
          examples:
          - equals
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    MultiFilterMeta:
      type: object
      properties:
        value:
          description: Value to filter this column by
        matchMode:
          type: string
          description: "Filter match mode e.g. equals, notEquals, contains, notContains,\
            \ gt, gte, lt, lte"
          examples:
          - equals
        operator:
          type: string
          description: Filter operator either 'and' or 'or'
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/FilterConstraint"
          description: List of filter constraints for this filter
    MultiSortMeta:
      type: object
      properties:
        field:
          type: string
          description: Sort field for this multiple sort
          examples:
          - lastName
        order:
          type: integer
          format: int32
          description: "Sort order for this field either -1 desc, 0 none, 1 asc"
          examples:
          - 1
    QueryRequest:
      description: "Represents a PrimeReact query request from the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        first:
          type: integer
          format: int32
          description: First record
          examples:
          - 1
        rows:
          type: integer
          format: int32
          description: Number of rows
          examples:
          - 10
        page:
          type: integer
          format: int32
          description: Page number
          examples:
          - 1
        sortField:
          type: string
          description: Sort field if single field sorting
          examples:
          - firstName
        sortOrder:
          type: integer
          format: int32
          description: "Sort order if single field sorting either -1 desc, 0 none,\
            \ 1 asc"
          examples:
          - 1
        multiSortMeta:
          type: array
          items:
            $ref: "#/components/schemas/MultiSortMeta"
          description: Multiple sorting list of columns to sort and in which order
        filters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/MultiFilterMeta"
          description: Map of columns being filtered and their filter criteria
    QueryResponse:
      description: "Represents a PrimeReact query response to the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          description: Total records available by this query criteria
          examples:
          - 4128
        records:
          type: array
          items: {}
          description: "Records for this set of pagination, sorting, filtering."
    QueryResponseCar:
      description: "Represents a PrimeReact query response to the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          description: Total records available by this query criteria
          examples:
          - 4128
        records:
          type: array
          items:
            $ref: "#/components/schemas/Car"
          description: "Records for this set of pagination, sorting, filtering."
    SocketMessage:
      description: WebSocket message
      type: object
      required:
      - type
      properties:
        type:
          description: Type of socket message
          type: string
          examples:
          - USER_JOINED
          - USER_LEFT
          - REFRESH_DATA
          - NOTIFICATION
          $ref: "#/components/schemas/SocketMessageType"
        message:
          type: string
          description: Optional message payload
          examples:
          - User connected
          - Please refresh your data
    SocketMessageType:
      type: string
      enum:
      - REFRESH_DATA
      - NOTIFICATION
tags:
- name: Car Resource
  description: CRUD operations for the Car entity.
- name: WebSocket Resource
  description: WebSocket operations.
paths:
  /entity/cars:
    get:
      summary: List cars
      description: Returns a paginated list of cars with optional filtering and sorting
      tags:
      - Car Resource
      parameters:
      - name: request
        in: query
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponseCar"
        "400":
          description: Invalid request format
    post:
      summary: Create a new car
      description: Creates a new car entry
      tags:
      - Car Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "201":
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "422":
          description: Invalid car data provided
        "400":
          description: Bad Request
  /entity/cars/manufacturers:
    get:
      summary: Get all manufacturers
      description: Returns a list of distinct car manufacturers
      tags:
      - Car Resource
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /entity/cars/{id}:
    put:
      summary: Update a car
      description: Updates an existing car based on ID
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "200":
          description: Car updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
        "400":
          description: Bad Request
    get:
      summary: Get a car by ID
      description: Returns a car based on the provided ID
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
    delete:
      summary: Delete a car
      description: Deletes a car based on ID
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        "204":
          description: Car successfully deleted
        "404":
          description: Car not found
  /socket/notify:
    post:
      summary: Push notification message
      description: Pushes a notification message to all connected clients
      tags:
      - WebSocket Resource
      parameters:
      - name: message
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Notification message sent successfully
        "422":
          description: Message cannot be null or blank
  /socket/refresh:
    post:
      summary: Push a UI refresh signal
      description: Pushes a UI refresh signal to all connected clients
      tags:
      - WebSocket Resource
      responses:
        "201":
          description: Refresh UI message sent successfully
info:
  title: Quarkus PrimeReact Monorepo
  version: 1.0.0
  description: Quarkus monorepo demonstrating Panache REST server with PrimeReact
    UI client
  contact:
    name: Melloware
    email: mellowaredev@gmail.com
    url: https://melloware.com
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
